apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    servicegroup: backoffice
  name: ingress-nginx-backoffice
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice
  namespace: ingress-nginx-backoffice
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission
  namespace: ingress-nginx-backoffice
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice
  namespace: ingress-nginx-backoffice
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - ingress-controller-leader
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - ingress-controller-leader
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission
  namespace: ingress-nginx-backoffice
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice
  namespace: ingress-nginx-backoffice
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx-backoffice
subjects:
- kind: ServiceAccount
  name: ingress-nginx-backoffice
  namespace: ingress-nginx-backoffice
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission
  namespace: ingress-nginx-backoffice
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx-backoffice-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-backoffice-admission
  namespace: ingress-nginx-backoffice
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx-backoffice
subjects:
- kind: ServiceAccount
  name: ingress-nginx-backoffice
  namespace: ingress-nginx-backoffice
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx-backoffice-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-backoffice-admission
  namespace: ingress-nginx-backoffice
---
apiVersion: v1
data:
  allow-snippet-annotations: "true"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-controller
  namespace: ingress-nginx-backoffice
data:
  allow-snippet-annotations: 'true'
  max-worker-connections: '100000'
  http-snippet: |
    server{
      listen 2443;
      return 308 https://$host$request_uri;
    }
  proxy-real-ip-cidr: 0.0.0.0/0 
  use-forwarded-headers: 'true'
  log-format-upstream: '$remote_addr - $request_id - [$proxy_add_x_forwarded_for] - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status'  
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-controller
  namespace: ingress-nginx-backoffice
spec:
  externalTrafficPolicy: Local
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-controller-admission
  namespace: ingress-nginx-backoffice
spec:
  ports:
  - appProtocol: https
    name: https-webhook
    port: 443
    targetPort: webhook
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-controller
  namespace: ingress-nginx-backoffice
spec:
  replicas: 2
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-backoffice
      app.kubernetes.io/name: ingress-nginx-backoffice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-backoffice
        app.kubernetes.io/name: ingress-nginx-backoffice
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx-backoffice-controller
        - --election-id=ingress-controller-leader
        - --controller-class=k8s.io/ingress-nginx-backoffice
        - --ingress-class=nginx-backoffice
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-backoffice-controller
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        image: 676826599814.dkr.ecr.ap-northeast-2.amazonaws.com/ingress-nginx-controller:1.4.0
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 8443
          name: webhook
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
        volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
      dnsPolicy: ClusterFirst
      nodeSelector:
        System: management
        kubernetes.io/os: linux
      serviceAccountName: ingress-nginx-backoffice
      terminationGracePeriodSeconds: 300
      volumes:
      - name: webhook-cert
        secret:
          secretName: ingress-nginx-backoffice-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission-create
  namespace: ingress-nginx-backoffice
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx-backoffice
        app.kubernetes.io/name: ingress-nginx-backoffice
        app.kubernetes.io/part-of: ingress-nginx-backoffice
        app.kubernetes.io/version: 1.4.0
      name: ingress-nginx-backoffice-admission-create
    spec:
      containers:
      - args:
        - create
        - --host=ingress-nginx-backoffice-controller-admission,ingress-nginx-backoffice-controller-admission.$(POD_NAMESPACE).svc
        - --namespace=$(POD_NAMESPACE)
        - --secret-name=ingress-nginx-backoffice-admission
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: 676826599814.dkr.ecr.ap-northeast-2.amazonaws.com/ingress-nginx-kube-webhook-certgen:1.4.0
        imagePullPolicy: IfNotPresent
        name: create
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        System: management
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: ingress-nginx-backoffice-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: ingress-nginx-backoffice-admission-patch
  namespace: ingress-nginx-backoffice
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx-backoffice
        app.kubernetes.io/name: ingress-nginx-backoffice
        app.kubernetes.io/part-of: ingress-nginx-backoffice
        app.kubernetes.io/version: 1.4.0
      name: ingress-nginx-backoffice-admission-patch
    spec:
      containers:
      - args:
        - patch
        - --webhook-name=ingress-nginx-backoffice-admission
        - --namespace=$(POD_NAMESPACE)
        - --patch-mutating=false
        - --secret-name=ingress-nginx-backoffice-admission
        - --patch-failure-policy=Fail
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: 676826599814.dkr.ecr.ap-northeast-2.amazonaws.com/ingress-nginx-kube-webhook-certgen:1.4.0
        imagePullPolicy: IfNotPresent
        name: patch
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        System: management
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: ingress-nginx-backoffice-admission
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx-backoffice
    app.kubernetes.io/name: ingress-nginx-backoffice
    app.kubernetes.io/part-of: ingress-nginx-backoffice
    app.kubernetes.io/version: 1.4.0
  name: nginx-backoffice
spec:
  controller: k8s.io/ingress-nginx-backoffice
---
# apiVersion: admissionregistration.k8s.io/v1
# kind: ValidatingWebhookConfiguration
# metadata:
#   labels:
#     app.kubernetes.io/component: admission-webhook
#     app.kubernetes.io/instance: ingress-nginx-backoffice
#     app.kubernetes.io/name: ingress-nginx-backoffice
#     app.kubernetes.io/part-of: ingress-nginx-backoffice
#     app.kubernetes.io/version: 1.4.0
#   name: ingress-nginx-backoffice-admission
# webhooks:
# - admissionReviewVersions:
#   - v1
#   clientConfig:
#     service:
#       name: ingress-nginx-backoffice-controller-admission
#       namespace: ingress-nginx-backoffice
#       path: /networking/v1/ingresses
#   failurePolicy: Fail
#   matchPolicy: Equivalent
#   name: validate.nginx.ingress.kubernetes.io
#   rules:
#   - apiGroups:
#     - networking.k8s.io
#     apiVersions:
#     - v1
#     operations:
#     - CREATE
#     - UPDATE
#     resources:
#     - ingresses
#   sideEffects: None
